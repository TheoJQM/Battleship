type: edu
files:
  - name: src/battleship/Main.kt
    visible: true
    text: |-
      package battleship
      
      fun main() {
          println("Hello World!")
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      
      public class Tests extends StageTest<String> {
          @DynamicTestingMethod
          CheckResult testExample() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!matrixIsEmpty(getFieldMatrix(output))) {
                  return CheckResult.wrong("Not an empty game field at the start of the game");
              }
      
              // Filling the first player field
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("F3 F7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "F3 F7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("A1 D1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 D1");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("J7 J10").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("J10 J8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J10 J8");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("B9 D8").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("B9 D9").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "B9 D9");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("E6 D6").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              output = main.execute("I2 J2").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "I2 J2");
      
              if (!output.toLowerCase().contains("enter")) {
                  return CheckResult.wrong("No offer found to give the move to another player");
              }
      
              output = main.execute("");
      
              // Filling the second player field
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                      "coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("H2 H6");
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "H2 H6");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("F3 F6");
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "F3 F6");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("H8 F8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "H8 F8");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("D4 D6").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "D4 D6");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("D8 C8");
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "D8 C8");
      
              if (!output.toLowerCase().contains("enter")) {
                  return CheckResult.wrong("no offer found to give the move to another player");
              }
              output = main.execute("");
      
              // Players' moves
              String[] splittedOutput = output.split("---\n");
              if (splittedOutput.length != 2) {
                  return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
              }
              if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                  return CheckResult.wrong("At the start of the game the upper field should be empty");
              }
              findAllShips(getFieldMatrix(splittedOutput[1]),
                  new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});
      
              output = main.execute("I3");
              if (!output.toLowerCase().contains("missed")) {
                  return CheckResult.wrong("Incorrect reaction of the program if the player missed");
              }
      
              output = main.execute("");
              checkMissing(getFieldMatrix(output), "I3");
      
              splittedOutput = output.split("---\n");
              if (splittedOutput.length != 2) {
                  return CheckResult.wrong("An incorrect number of game fields (2 should be)");
              }
              if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                  return CheckResult.wrong("At the start of the game the upper field should be empty");
              }
              findAllShips(getFieldMatrix(splittedOutput[1]),
                  new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});
      
              output = main.execute("C9");
              if (!output.toLowerCase().contains("hit")) {
                  return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
              }
              main.execute("");
      
              makeMoveTillTheEnd(main);
      
              return CheckResult.correct();
          }
      
          void makeMoveTillTheEnd(TestedProgram main) {
      
              String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
              String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};
      
              String[][] matrix;
              String output;
              int i;
      
              for (i = 0; i < 3; i++) {
                  main.execute(firstPlayerMoves[i]);
                  main.execute("");
                  main.execute(secondPlayerMoves[i]);
                  main.execute("");
              }
      
              main.execute(firstPlayerMoves[i]);
              main.execute("");
      
              output = main.execute(secondPlayerMoves[i]);
              if (!output.contains("sank")) {
                  throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
              }
              output = main.execute("");
      
              String[] splittedOutput = output.split("---\n");
              if (splittedOutput.length != 2) {
                  throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
              }
      
              matrix = getFieldMatrix(splittedOutput[1]);
              checkShot(matrix, "A1");
              checkShot(matrix, "B1");
              checkShot(matrix, "C1");
              checkShot(matrix, "D1");
      
              for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                  main.execute(firstPlayerMoves[i]);
                  main.execute("");
                  main.execute(secondPlayerMoves[i]);
                  main.execute("");
              }
      
              main.execute(firstPlayerMoves[i]);
              main.execute("");
              output = main.execute(secondPlayerMoves[i]).toLowerCase();
      
              if (!output.contains("won") || !output.contains("congratulations")) {
                  throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                      "\"You sank the last ship. You won. Congratulations!\"");
              }
          }
      
          void findShipByCoordinates(String[][] matrix, String coordinates) {
              int[] coordinatesInt = parseCoordinates(coordinates);
      
              if (coordinatesInt[0] > coordinatesInt[2]) {
                  int swap = coordinatesInt[0];
                  coordinatesInt[0] = coordinatesInt[2];
                  coordinatesInt[2] = swap;
              } else if (coordinatesInt[1] > coordinatesInt[3]) {
                  int swap = coordinatesInt[1];
                  coordinatesInt[1] = coordinatesInt[3];
                  coordinatesInt[3] = swap;
              }
      
              if (coordinatesInt[0] == coordinatesInt[2]) {
                  int cord = coordinatesInt[0];
                  for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                      if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                          throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                      }
                  }
              } else {
                  int cord = coordinatesInt[1];
                  for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                      if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                          throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                      }
                  }
              }
          }
      
          boolean matrixIsEmpty(String[][] matrix) {
              for (String[] strings : matrix) {
                  for (int j = 0; j < matrix.length; j++) {
                      if (!strings[j].trim().equals("~")) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          void checkShot(String[][] matrix, String coordinate) {
              int[] parsedCoordinate = new int[2];
              parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
              parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;
      
              if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                  throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
              }
          }
      
          boolean checkMissing(String[][] matrix, String coordinate) {
              int[] parsedCoordinate = new int[2];
              parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
              parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;
      
              return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
          }
      
          int[] parseCoordinates(String coordinatesString) {
              String[] splittedCoords = coordinatesString.split(" ");
              int[] parsedCoordinates = new int[4];
      
              parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
              parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
              parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
              parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;
      
              return parsedCoordinates;
          }
      
          int charToInt(String charCoordinate) {
              charCoordinate = charCoordinate.toLowerCase();
              char character = charCoordinate.charAt(0);
              return (int) character - (int) 'a';
          }
      
          String[][] getFieldMatrix(String output) {
      
              WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                  "Make sure you print it like in examples!");
      
              String[] splittedOutput = output.split("\n");
              String[][] matrix = new String[10][10];
      
              try {
                  int index = 0;
                  while (!(splittedOutput[index].contains("1") &&
                      splittedOutput[index].contains("2") &&
                      splittedOutput[index].contains("10"))) {
                      index++;
                      if (index > 1000) {
                          throw cantParseException;
                      }
                  }
                  index++;
      
                  for (int i = 0; i < 10; i++) {
                      String temp = splittedOutput[index].substring(2).trim();
                      String[] splittedLine = temp.trim().split(" ");
                      if (splittedLine.length != 10) {
                          throw cantParseException;
                      }
                      matrix[i] = splittedLine;
                      index++;
                  }
              } catch (IndexOutOfBoundsException ignored) {
                  throw cantParseException;
              }
      
              return matrix;
          }
      
          boolean isGameFieldPrinted(String output) {
              return output.contains("1") && output.contains("2") && output.contains("10");
          }
      
          void findAllShips(String[][] matrix, String[] coordinates) {
              for (String item : coordinates) {
                  findShipByCoordinates(matrix, item);
              }
          }
      }
    learner_created: false
  - name: src/battleship/Cell.kt
    visible: true
    text: |-
      package battleship
      
      enum class State {
          GOOD,
          DESTROYED
      }
      
      enum class Symbol(val value: String, val message: String) {
          Empty("~", ""),
          Full("O", ""),
          Missed("M", "\nYou missed!"),
          Touched("X", "\nYou hit a ship!")
      
      }
      
      class Cell() {
          var x = 0
          var y = 0
          var symbol = Symbol.Empty
          var hiddenSymbol = Symbol.Empty
      
          constructor(x: Int, y: Int, symbol: Symbol) : this() {
              this.x = x
              this.y = y
              this.symbol = symbol
              this.hiddenSymbol = symbol
          }
      
          override fun toString() = this.symbol.value
      }
    learner_created: true
  - name: src/battleship/Player.kt
    visible: true
    text: "package battleship\n\nclass Player(val name: String) : GamerInterface {\n\
    \    private val boats = listOf(\n        Boat(\"Aircraft Carrier\", 5), Boat(\"\
    Battleship\", 4), Boat(\"Submarine\", 3),\n        Boat(\"Cruiser\", 3), Boat(\"\
    Destroyer\", 2)\n    )\n\n    val board = List(10) { row ->\n        List(10)\
    \ { column ->\n            Cell(row, column, Symbol.Empty)\n        }\n    }\n\
    \n    init {\n        /*println(\"$name, place your ships on the game field\"\
    )\n        printBoard()\n        for (boat in boats) {\n            var boatPlaced\
    \ = false\n            var coordinates = println(\"Enter the coordinates of the\
    \ ${boat.name} (${boat.size} cells):\\n\").run { readln() }\n            while\
    \ (!boatPlaced) {\n                val validCoordinate = checkCoordinates(coordinates,\
    \ boat)\n                if (validCoordinate) {\n                    boatPlaced\
    \ = true\n                } else {\n                    coordinates = println(\"\
    Try again:\\n\").run { readln() }\n                }\n            }\n        }*/\n\
    \        checkCoordinates(\"F3 F7\", boats[0])\n        checkCoordinates(\"A1\
    \ D1\", boats[1])\n        checkCoordinates(\"J10 J8\", boats[2])\n        checkCoordinates(\"\
    B9 D9\", boats[3])\n        checkCoordinates(\"I2 J2\", boats[4])\n\n        hideBoats()\n\
    \        clearScreen()\n    }\n\n    private fun checkCoordinates(coordinate:\
    \ String, boat: Boat): Boolean {\n        val coordinatedRegex = Regex(\"\"\"\
    [A-J]([1-9]|10) [A-J]([1-9]|10)\"\"\")\n        val areCoordinateGood = coordinatedRegex.matches(coordinate.trim())\n\
    \n        val (startCell, endCell) = if (areCoordinateGood) createCoordinate(coordinate)\
    \ else listOf(Cell(), Cell())\n\n        return when {\n            !areCoordinateGood\
    \ -> {\n                print(\"Error: coordinates must be between A1 and J10\
    \ and in the format \\\"$$ $$\\\". \").let { false }\n            }\n\n      \
    \      startCell.x != endCell.x && startCell.y != endCell.y -> {\n           \
    \     print(\"Error: the boat can only be placed vertically or horizontally. \"\
    ).let { false }\n            }\n\n            else -> {\n                val boatCells\
    \ = createBoatCoordinates(startCell, endCell)\n                when {\n      \
    \              !checkBoatCoordinateAreEmpty(boatCells) -> false\n            \
    \        boatCells.size != boat.size -> {\n                        print(\"Error:\
    \ wrong length of the ${boat.name}!\").let { false }\n                    }\n\n\
    \                    else -> placeBoat(boat, boatCells).let { true }\n       \
    \         }\n            }\n        }\n    }\n\n    private fun createBoatCoordinates(startCell:\
    \ Cell, endCell: Cell): MutableList<Pair<Int, Int>> {\n        return if (startCell.x\
    \ == endCell.x) createBoat(startCell, endCell, true)\n        else createBoat(startCell,\
    \ endCell, false)\n    }\n\n    private fun createBoat(startCell: Cell, endCell:\
    \ Cell, isHorizontal: Boolean): MutableList<Pair<Int, Int>> {\n        val listCellCoordinates\
    \ = mutableListOf<Pair<Int, Int>>()\n        val min = if (isHorizontal) minOf(startCell.y,\
    \ endCell.y) else minOf(startCell.x, endCell.x)\n        val max = if (isHorizontal)\
    \ maxOf(startCell.y, endCell.y) else maxOf(startCell.x, endCell.x)\n        val\
    \ startX = startCell.x\n        val startY = startCell.y\n\n        if (isHorizontal)\
    \ {\n            for (y in min..max) listCellCoordinates.add(Pair(startX, y))\n\
    \        } else {\n            for (x in min..max) listCellCoordinates.add(Pair(x,\
    \ startY))\n        }\n\n        return listCellCoordinates\n    }\n\n    private\
    \ fun checkBoatCoordinateAreEmpty(coordinates: MutableList<Pair<Int, Int>>): Boolean\
    \ {\n        for (coordinate in coordinates) {\n            for (i in -1..1) {\n\
    \                for (j in -1..1) {\n                    try {\n             \
    \           if (board[coordinate.first + i][coordinate.second + j].symbol != Symbol.Empty)\
    \ {\n                            print(\"Error: the boat can’t be on or near an\
    \ another boat!\")\n                            return false\n               \
    \         }\n                    } catch (_: Exception) {\n                  \
    \  }\n                }\n            }\n        }\n        return true\n    }\n\
    \n    private fun placeBoat(boat: Boat, coordinates: MutableList<Pair<Int, Int>>)\
    \ {\n        val index = boats.indexOf(boat)\n        boats[index].cells = coordinates.toList().map\
    \ { Cell(it.first, it.second, Symbol.Full) }\n        coordinates.forEach {\n\
    \            board[it.first][it.second].symbol = Symbol.Full\n            board[it.first][it.second].hiddenSymbol\
    \ = Symbol.Full\n        }\n        printBoard()\n    }\n\n    private fun hideBoats()\
    \ {\n        board.flatten().forEach { it.symbol = Symbol.Empty }\n    }\n\n \
    \   fun updateBoatCells(cell: Cell): Boolean{\n        val index = boats.indexOfFirst\
    \ { boat -> boat.cells.any { it.x == cell.x && it.y == cell.y } }\n        boats[index].cells.first\
    \ { it.x == cell.x && it.y == cell.y }.hiddenSymbol = Symbol.Touched\n       \
    \ return checkBoatState(index)\n    }\n\n    private fun checkBoatState(index:\
    \ Int): Boolean {\n        val isDestroyed = boats[index].cells.all { it.hiddenSymbol\
    \ == Symbol.Touched }\n        val boatsAlive = boats.count { it.state == State.GOOD\
    \ }\n\n        return when {\n            isDestroyed && boatsAlive == 1 -> true\n\
    \n            boats[index].state == State.GOOD && isDestroyed && boatsAlive >\
    \ 1 -> {\n                boats[index].state = State.DESTROYED\n             \
    \   println(\"You sank a ship!\").let { false }\n            }\n\n           \
    \ isDestroyed -> {\n                boats[index].state = State.DESTROYED\n   \
    \             println(Symbol.Touched.message).let { false }\n            }\n \
    \           else -> println(Symbol.Touched.message).let { false }\n        }\n\
    \    }\n\n\n\n    private fun printBoard() {\n        println()\n        showBoard(true)\n\
    \        println()\n    }\n\n    fun showBoard(hidden: Boolean ) {\n        println(\"\
    \  1 2 3 4 5 6 7 8 9 10\")\n        for (i in board.indices) {\n            println(\"\
    ${(i + 65).toChar()} ${board[i].joinToString(\" \") { \n                if (hidden)\
    \ it.hiddenSymbol.value else it.symbol.value\n            }}\")\n        }\n \
    \   }\n}"
    learner_created: true
  - name: src/battleship/GamerInterface.kt
    visible: true
    text: |-
      package battleship
      
      interface GamerInterface {
          fun createCoordinate(coordinate: String): List<Cell> {
              return coordinate.split(" ").map { Cell(it.first().code - 65, it.drop(1).toInt() - 1, Symbol.Full) }
          }
      
          fun clearScreen() {
              println("Press Enter and pass the move to another player")
              if (System.`in`.read() != -1) repeat(10) { println("\u001B[0m" )}
          }
      }
    learner_created: true
  - name: src/battleship/Boat.kt
    visible: true
    text: |-
      package battleship
      
      class Boat(val name: String, val size: Int) {
          var state = State.GOOD
          var cells = List(size) { Cell() }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/30259#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 18 Apr 2024 09:33:16 UTC"
record: 5
